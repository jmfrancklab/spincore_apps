
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples\Hahn_echo_proc.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_Hahn_echo_proc.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_Hahn_echo_proc.py:

This example was a precursor to the GUI function.  Once GUI part of the master branch, probably delete this.

.. GENERATED FROM PYTHON SOURCE LINES 2-69


.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "C:\Users\Alex Guinness\gitstuff\spincore_apps\examples\Hahn_echo_proc.py", line 4, in <module>
        import SpinCore_pp
      File "C:\Users\Alex Guinness\gitstuff\spincore_apps\Spincore_pp\SpinCore_pp.py", line 17, in <module>
        _SpinCore_pp = swig_import_helper()
      File "C:\Users\Alex Guinness\gitstuff\spincore_apps\Spincore_pp\SpinCore_pp.py", line 16, in swig_import_helper
        return importlib.import_module('_SpinCore_pp')
      File "C:\ProgramData\Anaconda3\lib\importlib\__init__.py", line 127, in import_module
        return _bootstrap._gcd_import(name[level:], package, level)
    ModuleNotFoundError: No module named '_SpinCore_pp'






|

.. code-block:: default

    from pylab import *
    from pyspecdata import *
    import SpinCore_pp
    from datetime import datetime

    with figlist_var() as fl:
        config_dict = SpinCore_pp.configuration("active.ini")
        config_dict["type"] = "echo"
        # we do not load the date here, because this is designed to be run
        # immediately after an echo program, which would have written the date --
        # also, if we wnat to look at a different date, we just change it in the
        # config file
        filename = f"{config_dict['date']}_{config_dict['chemical']}_{config_dict['type']}"
        d = find_file(
            filename,
            exp_type="ODNP_NMR_comp/Echoes",
            expno=config_dict["type"] + "_" + str(config_dict["echo_counter"]),
        )
        assert (
            d.get_units("t2") is not None
        ), "bad data file!  units of s for t2 should be stored in nddata!"
        d.ft("ph1", unitary=True)
        if "nScans" in d.dimlabels:
            d.mean("nScans")
        d.ft("t2", shift=True)
        # {{{ show raw data with peak pick
        fl.next("raw ft")
        for j in d.getaxis("ph1"):
            fl.plot(abs(d["ph1":j]), label=f"Δp={j}", alpha=0.5)
        centerfrq = abs(d["ph1", +1]).argmax("t2").item()
        axvline(x=centerfrq / 1e3, ls=":", color="r", alpha=0.25)
        # }}}
        d_fullsw = d.C
        fl.next("zoomed")
        for j in d.getaxis("ph1"):
            fl.plot(
                abs(d["ph1":j]["t2" : tuple(r_[-3e3, 3e3] + centerfrq)]),
                label=f"Δp={j}",
                alpha=0.5,
            )
        noise = d["ph1", r_[0, 2, 3]]["t2":centerfrq].run(std, "ph1")
        signal = abs(d["ph1", r_[0, 2, 3]]["t2":centerfrq])
        assert signal > 3 * noise
        d = d["t2" : tuple(r_[-3e3, 3e3] + centerfrq)]
        d.ift("t2")
        fl.next("time domain, filtered")
        filter_timeconst = 10e-3
        myfilter = exp(
            -abs((d.fromaxis("t2") - config_dict["tau_us"] * 1e-6)) / filter_timeconst
        )
        for j in d.getaxis("ph1"):
            fl.plot(abs(d["ph1":j]), label=f"Δp={j}", alpha=0.5)
        fl.plot(myfilter * abs(d["ph1", 1]["t2" : config_dict["tau_us"] * 1e-6]))
        # {{{ show filtered data with peak pick
        d = d_fullsw
        d.ift("t2")
        d *= exp(-abs((d.fromaxis("t2") - config_dict["tau_us"] * 1e-6)) / filter_timeconst)
        d.ft("t2")
        fl.next("apodized ft")
        for j in d.getaxis("ph1"):
            fl.plot(abs(d["ph1":j]), label=f"Δp={j}", alpha=0.5)
        centerfrq = abs(d["ph1", +1]).argmax("t2").item()
        axvline(x=centerfrq / 1e3, ls=":", color="r", alpha=0.25)
        # }}}
        Field = config_dict["carrierFreq_MHz"] / config_dict["gamma_eff_MHz_G"]
        config_dict["gamma_eff_MHz_G"] -= centerfrq * 1e-6 / Field
        config_dict.write()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.008 seconds)


.. _sphx_glr_download_auto_examples_Hahn_echo_proc.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: Hahn_echo_proc.py <Hahn_echo_proc.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: Hahn_echo_proc.ipynb <Hahn_echo_proc.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
